"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const expressPromiseRouter = require("express-promise-router");
function createRouter(routeConfig) {
    const router = expressPromiseRouter.default();
    if (Array.isArray(routeConfig)) {
        routeConfig.forEach(({ method, path, handler }) => {
            const m = method.toLowerCase();
            if (Array.isArray(handler)) {
                router[m](path, ...handler);
            }
            else {
                router[m](path, handler);
            }
        });
    }
    else {
        Object.keys(routeConfig).forEach(p => {
            const [method, path] = p.split(' ');
            if (!isValidHttpVerb(method))
                throw new UnsupportedHttpVerbError();
            const m = method.toLowerCase();
            const handler = routeConfig[p];
            if (Array.isArray(handler)) {
                router[m](path, ...handler);
            }
            else {
                router[m](path, handler);
            }
        });
    }
    return router;
}
exports.createRouter = createRouter;
function isValidHttpVerb(value) {
    return ['get', 'post', 'put', 'patch', 'delete'].includes(value.toLowerCase());
}
class UnsupportedHttpVerbError extends Error {
    constructor() {
        super();
        this.name = 'UnsupportedHttpVerbError';
        this.message = 'The HTTP verb is not supported.';
    }
}
//# sourceMappingURL=express-routers.js.map